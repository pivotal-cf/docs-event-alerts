---
title: Using Event Alerts
owner: Event Alerts
---

<strong><%= modified_date %></strong>

This topic describes how to configure alert destinations and subscribe to alerts.
It explains how to set alert destinations as targets, and how to subscribe those targets to alert topics.
An example workflow is included below these procedures: see [Example Workflow](#example-workflow-webhook).

<%= vars.app_runtime_full %> users with admin permissions can run event alert commands and subscribe to alerts.
Admins can configure event alerts using the Cloud Foundry CLI.

##<a id='prerequisite'></a> Prerequisite

You must install both the <%= vars.product_full %> tile and plugin as described in the following sections:

* [Download and Install the <%= vars.product_short %> Tile](./installing.html#install)
* [Install the <%= vars.product_short %> Plugin](./installing.html#plugin)


##<a id='targets'></a> Create Targets for Alerts

Targets are destinations for alerts and are unique to each user.
A target can be an email address, a Slack channel, or a webhook.

To create an alert target:

1. Run the command:

    ```
    cf eva-create-target TARGET-NAME TARGET-TYPE VALUE
    ```
    Where:<br>
    * `TARGET-NAME` is a unique name for this target
    * `TARGET-TYPE` is one of the following:
      * Email
      * Slack
      * Webhook
    * `VALUE` is an appropriate value for the target type, for example, an email address

Examples for using this command to create each of these targets appear below.

### <a id='email_targets'></a> Create Email Targets

To create an email target:

1. Run the command:

    ```
    cf eva-create-target TARGET-NAME email EMAIL-ADDRESS
    ```
    For example:

    <pre class="terminal">$ cf eva-create-target user-email email user@example.com</pre>

    This creates a target named `user-email` for the email address `user@example.com`. Email addresses that do not
    match the currently logged in user are verified by sending an email containing a link.
    The target receives alerts after the user verifies the email.

    <p class="note"><strong>Note:</strong> You can use any email address as an alert target; email alert recipients do not
    necessarily have to be other admins or cf users.</p>

### <a id='slack_targets'></a> Create Slack Targets

To create a Slack target:

1. Create an incoming Slack webhook using the instructions in the
[Slack documentation](https://get.slack.help/hc/en-us/articles/115005265063-Incoming-WebHooks-for-Slack).<br><br>
  Record the Slack webhook URL, which is used in the next step.

1. Run the command:

    ```
    cf eva-create-target TARGET-NAME slack URL
    ```
    For example:<br>
    <pre class="terminal">
    $ cf eva-create-target my-slack-channel slack https<span>:</span>//hooks.slack.com/services/T024LQKAS/B9XFKQG59/YPwmF0cEXAMPLEc7T2iEr0b
    </pre>

    This creates a target named `my-slack-channel` where alerts go to the Slack webhook URL in the command.

Event alerts to a Slack channel, for example a **Critical Threshold Event** alert and a **Healthy Threshold Event** alert, might appear as follows:

![The example of a critical event is "Event occurred on foundation pws and deployment councourse.
 Critical Threshold Event: VM Health Check: riemann; pws. The VM Health Check (system.healthy)
 on this job is in the Critical threshold.
 Value 0.875 Job riemann Job ID 70d9… Recommended Response Documentation  https://docs.pivotal.io/…"
 The example of a healthy event is "Event occurred on foundation pws and deployment log-cache
 Healthy Threshold Event: VM Memory Used: log-cache: pws The percentage of Memory Used (system.mem.percent)
 on this job is in the Healthy threshold. Value 79.625% Job log-cache Job ID 592b…".
 ](sample-slack-alerts.png)

### <a id='webhook_targets'></a> Create Webhook Targets

Webhook targets provide many possibilities for using event alerts. For example, a simple
webserver proxy can forward events to Pager Duty, New Relic, Datadog, and other products.
You can also use webhook targets to log or store alerts for auditing purposes.

####<a name='formats'></a> About Webhook Request Formats

Webhook requests are not a standardized format. This means that the request payload
from <%= vars.product_short %> must be changed to a format compatible with the webhook receiver.
For example, for PagerDuty, the JSON request payload from <%= vars.product_short %> must be changed to
the format required for PagerDuty webhooks. For information about PagerDuty webhook payloads,
see the [PagerDuty documentation](https://v2.developer.pagerduty.com/docs/webhooks-v2-overview).

The format change can be done through a web server proxy. The proxy receives the webhook request
from <%= vars.product_short %>, transforms the request payload to the new format, and forwards the request
to the end receiver, for example, PagerDuty.

#### Procedure

To create a webhook target:

1. Run the command:

    ```
    cf eva-create-target TARGET-NAME webhook URL
    ```

    Where `URL` is the URL of the end receiver or, if you are using a proxy, it is the URL of the proxy app.
    See [About Webhook Request Formats](#formats) above.<br><br>

    For example:
  <pre class="terminal">$ cf eva-create-target my-webhook webhook https<span>:</span>//example.com/pcf-events/foundation-prod</pre>

    This creates a target named `my-webhook`.
    <%= vars.product_short %> posts a JSON webhook payload to `https://example.com/pcf-events/foundation-prod`
    in the following format:

    ```
    {
      "publisher": "healthwatch",
      "topic": "system.cpu.user",
      "timestamp": "2018-03-22T10:41:31-06:00",
      "metadata": {
        "level": "CRITICAL",
        "foundation": "pcf.example.com",
        "job": "router"
      },
      "subject": "CRITICAL Threshold Event: VM Memory Used: router; pcf.example.com",
      "body": "<b>level: CRITICAL</b>"
    }
    ```

    In the above example:
    <ul>
      <li> <code>healthwatch</code> is the alert publisher.</li>
      <li> <code>system.cpu.user</code> is the alert topic.</li>
      <li> The <code>metadata</code> keys shown, <code>level</code> <code>foundation</code> and <code>job</code>,
           represent what the publisher sends to <%= vars.product_short %>
           and can be different for each alert topic.</li>
    </ul>

##<a id='subscribe_topics'></a> Subscribe to Alert Topics
In order for a target to start receiving alerts, you must subscribe it to available alert topics.
A topic is an event that is relevant to your system.

<p class="note"><strong>Note:</strong> To set up and subscribe to Healthwatch topics,
you <strong>must</strong> have Healthwatch v1.3 or later installed.
</p>

To subscribe a target to one or more alert topics:

1. To see a list of available topics, run the <code>cf eva-topics</code> command:
  <pre class="terminal">
  $ cf eva-topics
  Getting topics as admin...
  OK
  Publisher      Topic                            Description
  healthwatch    system.mem.percent               VM Memory Used
  healthwatch    system.cpu.user                  VM CPU Utilization
  healthwatch    system.disk.persistent.percent   VM Persistent Disk Used
  healthwatch    system.disk.ephemeral.percent    VM Ephemeral Disk Used
  healthwatch    system.disk.system.percent       VM Disk Used
  healthwatch    system.healthy                   VM Health Check
  </pre>

1. To subscribe a target to a topic, use either of the commands below.
    * To subscribe a target to one or more topics from a publisher:

        ```
        cf eva-subscribe TARGET-NAME PUBLISHER --topics TOPIC1,TOPIC2,...
        ```
    * To subscribe a target to all topics from a publisher:

        ```
        cf eva-subscribe TARGET-NAME PUBLISHER --all
        ```

        <p class="note"><strong>Note:</strong> If you subscribe to <code>all</code> topics from a publisher, you can subscribe to
        a single topic from that publisher by running <code>cf eva-subscribe TAEGET-NAME PUBLISHER --topics TOPIC1</code>.</p>

    Find the `PUBLISHER` and the `TOPIC` name(s) from the topic list in the previous step.
    Enter topic names in the command separated by commas.<br><br>

    For example, to subscribe the target `user-email` to two topics from the publisher `healthwatch`, run:<br>

    <pre class="terminal">$ cf eva-subscribe user-email healthwatch --topics system.mem.percent,system.cpu.user</pre>

    Or, to subscribe the target `user-email` to all topics from the publisher `healthwatch`, run:

    <pre class="terminal">$ cf eva-subscribe user-email healthwatch --all</pre>



##<a id='unsubscribe_topics'></a>Unsubscribe from Alert Topics

To unsubscribe a target from alert topics:

* Unsubscribe a target from one or more topics from a publisher by running the following command:

    ```
    cf eva-unsubscribe TARGET-NAME PUBLISHER --topics TOPIC1,TOPIC2,...
    ```
    <br>
    For example, to unsubscribe the target `user-email` from the `system.cpu.user` topic from the publisher `healthwatch`, run:

    <pre class="terminal">$ cf eva-unsubscribe user-email healthwatch --topics system.cpu.user</pre>

    <p class="note"><strong>Note:</strong> If you subscribe to <code>all</code> topics from a publisher, you can unsubscribe from
    a single topic from that publisher using the above command. To resubscribe to the topic, run <code>cf eva-subscribe TAEGET-NAME PUBLISHER --topics TOPIC1</code>.</p>
* Unsubscribe a target from all topics from a publisher by running the following command:

    ```
    cf eva-unsubscribe TARGET-NAME PUBLISHER --all
    ```
    <br>
    For example, to unsubscribe the target `user-email` from all topics from the publisher `healthwatch`, run:

    <pre class="terminal">$ cf eva-unsubscribe user-email healthwatch --all</pre>

To find `PUBLISHER` and `TOPIC` names run <code>cf eva-topics</code>.
The resulting list is shown in the procedure, [Subscribe to Alert Topics](#subscribe_topics), above. You must separate topic names with commas in the command.

##<a id='example-workflow-webhook'></a> Example Workflow: Send all Healthwatch Alerts to a Webhook

In this example workflow, you create a webhook target named `webhook-ops` that has the URL `http://example.com/healthwatch-events/foundation-prod`.
You then subscribe this target to all alert topics from the publisher `healthwatch`, and you publish a test alert to one of the `healthwatch` topics.

1. Create a webhook target named `webhook-ops`:

	<pre class="terminal">
	$ cf eva-create-target webhook-ops webhook http://example.com/healthwatch-events/foundation-prod
	</pre>

2. To verify that the target is created correctly, run `cf eva-targets`.

3. Subscribe the `webhook-ops` target to all healthwatch topics:

	<pre class="terminal">
	$ cf eva-subscribe webhook-ops healthwatch --all
	</pre>

4. Publish a sample message to a healthwatch topic. This requires that you have the `notifications.write` scope.

	<pre class="terminal">
	cf eva-sample-publish healthwatch system.healthy
	</pre>

    **All** targets subscribed to the `system.healthy` topic receive a sample alert.

5. Verify a webhook message was posted to the webhook-ops
URL. In this example, that is `http://example.com/healthwatch-events/foundation-prod`.

##<a id='command_help'></a> <%= vars.product_short %> Plugin Commands

Use the following <%= vars.product_short %> plugin commands to perform various tasks related to event alerts.

<table>
  <tr>
    <th>Command</th>
    <th>Action</th>
  </tr>
  <tr>
    <td><strong>eva-api</strong></td>
    <td>
    Displays the endpoint and version of the <%= vars.product_short %> API server.
    </td>
  </tr>
  <tr>
    <td><strong>eva-create-target</strong></td>
    <td>
    Creates a target.
    </td>
  </tr>
  <tr>
    <td><strong>eva-delete-target</strong></td>
    <td>
    Deletes a target.
    </td>
  </tr>
  <tr>
    <td><strong>eva-publishers</strong></td>
    <td>
    Displays a list of publishers.
    </td>
  </tr>
  <tr>
    <td><strong>eva-sample-publish</strong></td>
    <td>
    Publishes a sample event to all subscribers of the specified topic.
    To issue this command, you must have the <code>notifications.write</code> UAA scope.
    For information about these UAA privileges,
    see the <a href="https://docs.cloudfoundry.org/concepts/architecture/uaa.html#scopes">Cloud Foundry documentation</a>.
    </td>
  </tr>
  <tr>
    <td><strong>eva-smoke</strong></td>
    <td>
    Runs a smoke test against event alerts.
    </td>
  </tr>
  <tr>
    <td><strong>eva-subscribe</strong></td>
    <td>
    Subscribes to topics for a publisher.
    </td>
  </tr>
  <tr>
    <td><strong>eva-subscriptions</strong></td>
    <td>
    Displays a list of current subscriptions.
    </td>
  </tr>
  <tr>
    <td><strong>eva-targets</strong></td>
    <td>
    Displays a list of targets.
    </td>
  </tr>
  <tr>
    <td><strong>eva-topics</strong></td>
    <td>
    Displays a list of topics.
    </td>
  </tr>
  <tr>
    <td><strong>eva-unsubscribe</strong></td>
    <td>
    Unsubscribes from all topics from a specific publisher.
    </td>
  </tr>
  <tr>
    <td><strong>eva-update-target</strong></td>
    <td>
    Updates a target name.
    </td>
  </tr>
</table>

You can also use commands to get help directly on the command line while working with the
<%= vars.product_short %> plugin.

* To list all event alert commands:

    ```
    cf plugins | grep event-alerts
    ```
* To get help with a specific command:

    ```
    cf help COMMAND
    ```
