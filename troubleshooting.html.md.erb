---
title: Monitoring and Troubleshooting Event Alerts
owner: Event Alerts
---

<strong><%= modified_date %></strong>

This topic describes how to monitor and troubleshoot <%= vars.product_full %>.

##<a id='monitor'></a> Monitor <%= vars.product_short %>

<%= vars.product_short %> is deployed as an app in <%= vars.app_runtime_full %> (<%= vars.app_runtime_abbr %>).
By default, this app is called `event-alerts` and is deployed in the `event-alerts` space within the `system` org.

To monitor the performance of <%= vars.product_short %> or to retrieve troubleshooting information:

* Use the Cloud Foundry Command Line Interface (cf CLI) to obtain logs for the `event-alerts` app.
  For more information, see [Application Logging in Cloud Foundry](https://docs.pivotal.io/pivotalcf/devguide/deploy-apps/streaming-logs.html).
* Use the App Metrics service.
  For more information, see [App Metrics](https://docs.pivotal.io/app-metrics/index.html).
* Use the Metrics Registrar service. To use this service, you must install the plugin
  and register the `event-alerts` app as a JSON metrics source. For instructions,
  see [Install the Plugin](https://docs.pivotal.io/platform/application-service/metric-registrar/using.html#install-plugin)
  and [Register a Structured Log Format](https://docs.pivotal.io/platform/application-service/metric-registrar/using.html#register-log-format)
  in _Using Metric Registrar_.
* Use the Metrics Forwarder service.
  The `event-alerts` app detects if you have an available instance of Metrics Forwarder
  and transmits custom app metrics through Loggregator to the service.
  For more information, see [Metrics Forwarder](https://docs.pivotal.io/metrics-forwarder/).
  <p class="note"><strong>Note:</strong> When Metrics Forwarder is not installed,
  <%= vars.product_short %> produces an error.
     This indicates that no custom metrics are being published to the Firehose.
     It does not indicate a problem with the system.</p>

     <p class="note"><strong>Note:</strong> If you use <%= vars.product_short %> v1.2.9 and earlier
       on <%= vars.app_runtime_full %> v2.5 and later,
       App Metrics and Metric Forwarder fail to emit metrics.</p>

##<a id="scale"></a> Scale <%= vars.product_short %>

You might need to scale <%= vars.product_short %> to improve performance.

To scale <%= vars.product_short %>:

1. Use the cf CLI to log in to your <%= vars.app_runtime_abbr %> deployment as an admin. For example:
	<pre class="terminal">$ cf login
	API endpoint: http<span>s:</span>//api.sys.cf-example.com
	Email> admin
	Password>
	</pre>
1. When prompted, select the `system` org and the `event-alerts` space.
1. Scale up the number of instances of the `event-alerts` app.
   Two instances should adequately handle most alerting workloads from Healthwatch.
   For example:
	<pre class="terminal">$ cf scale event-alerts -i 2</pre>
	If you are running very large <%= vars.app_runtime_abbr %> deployments with frequent threshold events,
        you might need to increase the instance count above two.

##<a id="reduce-notifications"></a> Reduce Notifications

If <%= vars.product_short %> is receiving frequent event notifications, you can do one or both of the following:

* Unsubscribe from alerts that have minimal action.
* Increase threshold values to supply better indicators for action.

For more information about unsubscribing from alerts and increasing threshold values, see [Using <%= vars.product_short %>](using.html).

##<a id="t-shoot-errors"></a> Troubleshooting Errors

This section provides information about how to troubleshoot specific errors.

###<a id="errand-communication-failure"></a> Deploy <%= vars.product_short %> Errand Fails Due to Communications Link Failure

<p class="note">
   <strong>Note:</strong> This issue has been resolved in <%= vars.product_short %> v1.2.12.
</p>

This issue occurs when you have VMware Tanzuâ„¢ SQL with MySQL for VMs (Tanzu SQL for VMs) v2.10 installed
and **TLS Options** is set to any value other than **Not Configured**
in the **Security** pane of the Tanzu SQL for VMs tile.
If you do not resolve this issue, <%= vars.product_short %> is not deployed.

#### Symptom

After you deploy Tanzu SQL for VMs v2.10, you see in the <%= vars.ops_manager %> Installation Dashboard that
the **Deploy <%= vars.product_short %>** errand fails with an error similar to the following example:

<pre class="terminal">
ERROR:
Unable to obtain connection from database (jdbc://example.com) for user 'migrations_user': Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SQL State  : 08S01
Error Code : 0
Message    : Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
</pre>

#### Explanation

In Tanzu SQL for VMs v2.10, MySQL requires TLS v1.2 for all TLS connections
even when the **Accept only TLS 1.2 connections** checkbox in the **Security** pane
of the Tanzu SQL for VMs tile is disabled.
When the **Deploy <%= vars.product_short %> Errand** runs,
the errand does not connect to the database using TLS v1.2 when attempting to migrate the database.
This causes the errand to fail.

#### Solution

To solve this issue:

1. Export the GUID of the `event-alerts` space by running:

    ```
    export SPACE_GUID=$(cf space event-alerts --guid)
    ```

1. To find the GUID of your Tanzu SQL for VMs service instance, run:

    ```
    cf curl "/v3/service_instances?names=pcf-event-alerts-db&space_guids=${SPACE_GUID}"
    ```

2. Record the GUID from the `resources[0].guid` property in the JSON output of the command
   in the step above.

1. To retrieve a list of the VMs in your Tanzu SQL for VMs service instance, run:

    ```
    bosh -d service-instance_GUID vms
    ```
    Where `GUID` is the GUID of your Tanzu SQL for VMs service instance that you recorded
    in the step above.

1. For each `mysql` VM:

     1. Run:

        ```
        bosh -d service-instance_GUID ssh MYSQL-INSTANCE-NAME
        ```

        Where:
        * `GUID` is the GUID of your Tanzu SQL for VMs service instance.
        * `MYSQL-INSTANCE-NAME` is one of the MySQL instance names from the list of VMs
          that you retrieved in the step above.

     1. Switch to the root user profile in your terminal by running:

        ```
        sudo -i
        ```

     1. Open the `/var/vcap/jobs/mysql/config/my.cnf` file in a text editor.

     1. Delete the line containing `tls_version = TLSv1.2`.

     1. Restart the VM by running:

        ```
        monit restart mysql
        ```

1. After you have restarted each MySQL VM, rerun the **Deploy <%= vars.product_short %> Errand**.

###<a id="errand-binary-logging"></a> Deploy <%= vars.product_short %> Errand Fails Due to Binary Logging

This problem happens when you do not have `SUPER` privileges and binary logging is enabled.
If you do not resolve this issue, <%= vars.product_short %> is not deployed.

#### Symptom

When you **Apply Changes**, you see in the <%= vars.ops_mangaer %> installation pane that
the **Deploy <%= vars.product_short %>** errand fails with the following error:

<pre class="terminal">
You do not have the SUPER privilege and
binary logging is enabled (you *might* want to use the less safe
log_bin_trust_function_creators variable)
</pre>

#### Explanation

For information about the above error message,
see [Stored Program Binary Logging](https://dev.mysql.com/doc/refman/en/stored-programs-logging.html)
in the open source MySQL documentation.

#### Solution

To solve this issue:

  1. Drop the <%= vars.product_short %> database and re-create it.
  For information about dropping a database, see [DROP DATABASE Syntax](https://dev.mysql.com/doc/refman/en/drop-database.html) in the open source MySQL documentation.
  2. Do one of the following:
     * In the database, disable binary logging. For information about disabling binary logging, see [The Binary Log](https://dev.mysql.com/doc/refman/en/binary-log.html) in the open source MySQL documentation.
     * In the database, set `log_bin_trust_function_creators` to `1`. For information about `log_bin_trust_function_creators`, see [log\_bin\_trust\_function\_creators](https://dev.mysql.com/doc/refman/en/replication-options-binary-log.html#sysvar_log_bin_trust_function_creators) in the open source MySQL documentation.
  3. In <%= vars.ops_manager %>, **Apply Changes** with the **Deploy <%= vars.product_short %>** errand checked.

###<a id="ip-binding"></a> <%= vars.product_short %> Fails to Release IP Address Bindings on MySQL Upgrade

#### Symptom

When upgrading from MySQL for Pivotal Cloud Foundry v2.4 to v2.5, all service bindings must be changed from
IP address based bindings to hostname based bindings.
<%= vars.product_short %> sometimes fails to release IP address bindings after following the procedure in
[Deprecated Service Bindings Found (Upgrade Error)](https://docs.pivotal.io/p-mysql/2-5/troubleshoot.html#deprecated-service-bindings).

#### Explanation

The cause of this issue is unknown.

#### Solution

Re-create the service key by running:

<p class="note warning">
  <strong>Warning:</strong> You must use the username <code>migrations_user</code> in the command below.
  Without this, a random name is generated that causes <%= vars.product_short %> to fail.
</p>

```
cf create-service-key pcf-event-alerts-db migrations_service_key -c '{ "username": "migrations_user" }'
```
